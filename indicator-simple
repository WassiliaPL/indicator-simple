#!/usr/bin/env python
# -*- coding: utf-8 -*-

import signal, os, gi, psutil, re
try:
	import commands
except:
	import subprocess as commands
gi.require_version('Gtk', '3.0')
gi.require_version('AppIndicator3', '0.1')
from gi.repository import Gtk, GLib, AppIndicator3

APPINDICATOR_ID = 'monitor'

INTERVAL_INDICATOR_LABEL = 1
INTERVAL_ITEM_TEMP_LABEL = 3
INTERVAL_ITEM_SONG_LABEL = 6
INTERVAL_ITEM_DISK_LABEL = 20
INTERVAL_ITEM_PING_LABEL = 8

signal.signal(signal.SIGINT, signal.SIG_DFL)

class MainClass:
	def update_indicator_label(self, arg):
		self.indicator.set_label(self.get_cpu_load(), "")
		return True

	def update_item_temp_label(self, arg):
		self.item_temp.set_label(self.get_temp())
		return True

	def update_item_song_label(self, arg):
		self.item_song.set_label(self.get_song())
		return True

	def update_item_disk_label(self, arg):
		self.item_disk.set_label(self.get_disk())
		return True

	def update_item_ping_label(self, arg):
		self.item_ping.set_label(self.get_ping())
		return True

	def build_menu(self):
		#building menu
		self.menu = Gtk.Menu()
		
		self.item_temp = Gtk.MenuItem(self.get_temp())
		self.menu.append(self.item_temp)
		self.item_temp.set_sensitive(False)

		self.item_disk = Gtk.MenuItem(self.get_disk())
		self.menu.append(self.item_disk)
		self.item_disk.set_sensitive(False)

		self.item_song = Gtk.MenuItem(self.get_song())
		self.menu.append(self.item_song)
		self.item_song.set_sensitive(False)

		self.item_ping = Gtk.MenuItem(self.get_ping())
		self.menu.append(self.item_ping)
		self.item_ping.set_sensitive(False)

		self.item_quit = Gtk.MenuItem('Quit')
		self.item_quit.connect('activate', self.quit)
		self.menu.append(self.item_quit)

		self.menu.show_all()
		return self.menu

	def get_cpu_load(self):
		rounding = '%.0f' % psutil.cpu_percent()
		cpu = "CPU: " + str(rounding) + "%"
        	return cpu

	def get_temp(self):
		temp = "CPU TEMP: " + commands.getoutput('cat /sys/class/thermal/thermal_zone0/temp |cut -c 1-2') + " Â°C"
		return temp

	def get_song(self):
		song = "SONG: " + commands.getoutput('mpc -h 192.168.1.100 current')
		return song

	def get_disk(self):
		formatted = '{0}'.format(psutil.disk_usage('/'))
		splitted = re.split(', ', formatted)
		free_raw = splitted[2].split("free=",1)[1]
		total_raw = splitted[0].split("total=",1)[1]
		free = int(free_raw)/1020/1020/1020
		total = int(total_raw)/1020/1020/1020
		out = "FREE SPACE: " + '%s' % free + "GB / " + '%s' % total + "GB"
		return out

	def get_ping(self):
		raw = commands.getoutput("ping -c1 8.8.8.8 |grep 'time='")
		ping = "PING: " + raw.split("time=",1)[1]
		return ping

	def quit(self, arg):
		#quiting whole app
		Gtk.main_quit()

	def main(self):
		#indicator init
		self.indicator = AppIndicator3.Indicator.new(APPINDICATOR_ID, 'indicator-cpufreq', AppIndicator3.IndicatorCategory.SYSTEM_SERVICES)
		self.indicator.set_status(AppIndicator3.IndicatorStatus.ACTIVE)
		self.indicator.set_menu(self.build_menu())

		#labels updating section
		GLib.timeout_add_seconds(INTERVAL_INDICATOR_LABEL, self.update_indicator_label, self.indicator)
		GLib.timeout_add_seconds(INTERVAL_ITEM_TEMP_LABEL, self.update_item_temp_label, self.indicator)
		GLib.timeout_add_seconds(INTERVAL_ITEM_SONG_LABEL, self.update_item_song_label, self.indicator)
		GLib.timeout_add_seconds(INTERVAL_ITEM_DISK_LABEL, self.update_item_disk_label, self.indicator)
		GLib.timeout_add_seconds(INTERVAL_ITEM_PING_LABEL, self.update_item_ping_label, self.indicator)

		#main
		Gtk.main()

if __name__ == "__main__":
	widget = MainClass()
	widget.main()
